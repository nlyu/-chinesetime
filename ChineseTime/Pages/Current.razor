@page "/Current"
@inject IChineseTimeDataManager ChineseTimeDataManager
@using System.Threading

<div class="index">
    <style @onload="@this.backgroundTimerStart"></style>
    <div class="current-time-main">
        <div class="current-time-hour">
            @this.showChineseTime.Hour
        </div>
        <div class="current-time-year">
            @this.constructShowYear(this.showtime)
        </div>
        <div class="current-time-date">
            @this.constructShowDate(this.showtime)
        </div>
        <div class="current-time-time">
            @if (string.IsNullOrEmpty(this.showtime.time))
            {
                <span>"不明"</span>
            }
            else
            {
                <span>@this.showtime.time</span>
            }
        </div>
        <div class="current-time-bonus">
            @if (string.IsNullOrEmpty(this.showtime.time))
            {
                <span>"不明"</span>
            }
            else
            {
                <span>@this.showtime.dayOfWeek</span>
            }
        </div>
    </div>
</div>

@code {
    private DateTime time;
    private int refreshTime = 1 * 1000;
    private int stopCounter = 5;
    private int startDelayTime = 1 * 1000;
    private int intervalDelayTime = 1 * 1000;
    private ChineseTime showtime = new ChineseTime();
    private ChineseTimeByHour showChineseTime = new ChineseTimeByHour();


    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;
    }

    private string constructShowYear(ChineseTime showtime)
    {
        if (showtime.year == null || string.IsNullOrEmpty(showtime.year))
        {
            return "年轮感知中...";
        }

        return $"公元{this.showtime.year}年";
    }

    private string constructShowDate(ChineseTime showtime)
    {
        if (showtime.year == null || string.IsNullOrEmpty(showtime.year))
        {
            return "日期校正中...";
        }

        return $"{this.showtime.month}月{this.showtime.day}日";
    }

    private void backgroundTimerStart()
    {
        var timer = new Timer(new TimerCallback(_ =>
        {
            this.updateCurrentChineseTime(DateTime.Now);
            var chinesetime = ChineseTimeDataManager.GetChineseTimeDataFromHour(DateTime.Now.Hour);
            this.showChineseTime = chinesetime;

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }), null, this.startDelayTime, this.intervalDelayTime);
    }

    private void updateCurrentChineseTime(DateTime time)
    {
        if (time == DateTime.MinValue)
        {
            this.showtime.year = "逝者如斯夫，不舍昼夜";
            this.showtime.month = "逝者如斯夫，不舍昼夜";
            this.showtime.day = "逝者如斯夫，不舍昼夜";
        }

        this.showtime.year = this.chineseYearConverter(time.Year.ToString());
        this.showtime.month = this.chineseMonthConverter(time.Month.ToString());
        this.showtime.day = this.chineseMonthConverter(time.Day.ToString());
        this.showtime.time = time.ToString("HH:mm:ss tt");
        this.showtime.dayOfWeek = this.chineseWeekDayConverter(time.DayOfWeek);
    }

    private string chineseNumberConverter(int num)
    {
        if (num < 0 || num > 10)
        {
            return "迷";
        }

        string[] chineseNum = new[] { "零", "一", "二", "三", "四", "五", "六", "七", "八", "九", "十" };
        return chineseNum[num];
    }

    private string chineseYearConverter(string year)
    {
        string chineseYear = string.Empty;
        foreach (var num in year)
        {
            chineseYear += this.chineseNumberConverter(num - '0');
        }

        return chineseYear;
    }

    private string chineseMonthConverter(string year)
    {
        string chineseYear = string.Empty;
        foreach (var num in year)
        {
            chineseYear += this.chineseNumberConverter(num - '0');
        }

        return chineseYear;
    }

    private string chineseWeekDayConverter(DayOfWeek dayOfWeek)
    {
        switch (dayOfWeek)
        {
            case DayOfWeek.Monday:
                return "周一";
            case DayOfWeek.Tuesday:
                return "周二";
            case DayOfWeek.Wednesday:
                return "周三";
            case DayOfWeek.Thursday:
                return "周四";
            case DayOfWeek.Friday:
                return "周五";
            case DayOfWeek.Saturday:
                return "周六";
            case DayOfWeek.Sunday:
                return "周日";
            default:
                return "今天周几?";
        }
    }

    private class ChineseTime
    {
        public string year { get; set; }
        public string month { get; set; }
        public string day { get; set; }
        public string time { get; set; }
        public string dayOfWeek { get; set; }
    }
}
